@using System.Security.Claims
@using AMS.Web.Authentication
<MudNavMenu>
    <AuthorizeView>
        <Authorized>
            <MudText Typo="Typo.h6" Class="px-4">Hi @context.User.FindFirst(x => x.Type == ClaimTypes.Name)?.Value</MudText>
            <MudText Typo="Typo.body2" Class="px-4 mud-text-secondary">@context.User.FindFirst(x => x.Type == ClaimTypes.Email)?.Value</MudText>
        </Authorized>
    </AuthorizeView>
    <MudDivider Class="my-2" />
    <AuthorizeView Roles="Admin">
        <Authorized>
            <MudNavLink Href="" Match="NavLinkMatch.All" Icon="fa-solid fa-gauge-high">Home</MudNavLink>
             <MudNavGroup Title="Management" Icon="fa-solid fa-users-gear" Expanded="false">
                <MudNavLink Href="user" Match="NavLinkMatch.Prefix" Icon="fa-solid fa-user-gear">Users</MudNavLink>
                <MudNavLink Href="roles" Match="NavLinkMatch.Prefix" Icon="fa-solid fa-user-lock">Roles</MudNavLink>
             </MudNavGroup>
            <MudNavLink Href="main" Match="NavLinkMatch.Prefix" Icon="fa-solid fa-bolt">Main Input</MudNavLink>
            <MudNavLink Href="sub" Match="NavLinkMatch.Prefix" Icon="fa-solid fa-plug-circle-bolt">Sub Input</MudNavLink>
            <MudNavLink Href="reports" Match="NavLinkMatch.Prefix" Icon="fa-solid fa-file-export">Reports</MudNavLink>
        </Authorized>
    </AuthorizeView>
    <AuthorizeView Roles="User">
        <Authorized>
            <MudNavLink Href="" Match="NavLinkMatch.All" Icon="fa-solid fa-gauge-high">Dashboard</MudNavLink>            
            <MudNavLink Href="reports" Match="NavLinkMatch.Prefix" Icon="fa-solid fa-file-export">Reports</MudNavLink>
        </Authorized>
    </AuthorizeView>
    
</MudNavMenu>


@code{
    [Inject] ISnackbar Snackbar { get; set; }
    [Inject] AuthenticationStateProvider AuthenticationState { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var authState = await AuthenticationState.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity?.IsAuthenticated == true)
            {
                var userName = user.FindFirst(c => c.Type == System.Security.Claims.ClaimTypes.Name)?.Value;
                var lastLogin = user.FindFirst(c => c.Type == System.Security.Claims.ClaimTypes.System)?.Value;
                Snackbar.Add(new MarkupString($"Welcome {userName}! <br/><br/> Last Login: {lastLogin}"), Severity.Info);
            }           
        }

        await base.OnAfterRenderAsync(firstRender);
    }

}
